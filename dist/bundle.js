(()=>{var e={365:e=>{e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";e.exports=function(e,t,n){var r=Math.floor(6*e),a=6*e-r,o=n*(1-t),l=n*(1-a*t),s=n*(1-(1-a)*t),i=255,c=255,d=255;switch(r){case 0:i=n,c=s,d=o;break;case 1:i=l,c=n,d=o;break;case 2:i=o,c=n,d=s;break;case 3:i=o,c=l,d=n;break;case 4:i=s,c=o,d=n;break;case 5:i=n,c=o,d=l}return[Math.floor(255*i),Math.floor(255*c),Math.floor(255*d)]}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e){return"#"+e.map((function(e){return r(e.toString(16))})).join("")}},function(e,t,n){"use strict";e.exports=function(e){return e.length>2?e:new Array(2-e.length+1).join("0")+e}},function(e,t,n){"use strict";var r=n(0),a=n(1),o=.618033988749895,l=void 0;function s(){l=Math.random()}function i(e,t){var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.hue,n=e.saturation,a=e.value;return void 0===t&&(l+=o,t=l%=1),"number"!=typeof n&&(n=.5),"number"!=typeof a&&(a=.95),r(t,n,a)}(e,t);return a(n)}s(),i.reSeed=s,e.exports=i}])}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{"use strict";n.d(r,{t:()=>B});const e=document.getElementById("navbar"),t=document.getElementById("current-project-tasks-container"),a=document.getElementById("Tform-title-in"),o=document.getElementById("Tform-description-in"),l=document.getElementById("Tform-date-in"),s=document.getElementById("Tform-priority-select"),i=document.getElementById("Tform-complete-in"),c=document.getElementById("modal"),d=document.getElementById("Tform-delete-icon"),u=document.getElementById("Tform-btn-submit-form"),m=document.getElementById("navbar-hidden-checkbox"),p=document.getElementById("Pform-for-project-creation-in"),E=document.getElementById("Pform-for-project-creation"),g=document.getElementById("Pform-plus-icon"),v=document.getElementById("btn-delete-complete-tasks");function f(){!function(){if(null==p.value||""===p.value)return;const e=new x(`${p.value}`);L=e.id,A.push(e)}(),t.innerHTML="",e.innerHTML="",A.forEach((t=>{let n=A.indexOf(t);const r=document.createElement("div"),a=document.createElement("select");A[n].tasksArray.forEach((e=>{const t=document.createElement("option");t.textContent=`${e.title} ${e.dueDate}`,a.appendChild(t)})),r.dataset.id=A[n].id,r.textContent=`${A[n].title}`,r.setAttribute("class","navbar-projects"),A[n].id===L&&r.classList.add("current");const o=document.createElement("span");o.textContent="delete",o.setAttribute("class","material-icons"),r.appendChild(o),r.appendChild(a),e.appendChild(r),o.addEventListener("click",(n=>{if(n.target.parentElement.dataset.id==L)if(null!=n.target.parentElement.nextSibling)n.target.parentElement.nextSibling.classList.add("current"),L=n.target.parentElement.nextSibling.dataset.id,S();else{if(1==A.length)return e.removeChild(n.target.parentElement),A.splice(A.indexOf(t),1),y(),void S();n.target.parentElement.previousSibling.classList.add("current"),L=n.target.parentElement.previousSibling.dataset.id}A.splice(A.indexOf(t),1),e.removeChild(n.target.parentElement),y(),S()}))})),p.value="",S()}function y(){t.innerHTML="";const e=A.find((e=>e.id===L));null!=e&&(e.tasksArray.forEach((n=>{let r=e.tasksArray.indexOf(n);const a=document.createElement("div"),o=document.createElement("span"),l=document.createElement("p"),s=document.createElement("input"),i=document.createElement("p"),c=document.createElement("textarea"),d=document.createElement("p"),u=document.createElement("input"),m=document.createElement("p"),p=document.createElement("select"),E=document.createElement("option"),g=document.createElement("option"),v=document.createElement("option"),f=document.createElement("p"),y=document.createElement("input");a.setAttribute("data-key",`${r}`),s.setAttribute("class","task-title-in"),c.setAttribute("class","task-desc-in"),u.setAttribute("class","task-date-in"),p.setAttribute("class","task-prio-in"),y.setAttribute("class","task-complete-in"),a.style.backgroundColor=e.tasksArray[r].color,a.setAttribute("class","task-containers"),o.setAttribute("id","delete-task-btn"),o.setAttribute("class","material-icons"),o.textContent="delete",o.addEventListener("click",(r=>{e.tasksArray.splice(e.tasksArray.indexOf(n),1),t.removeChild(r.target.parentElement),S(),location.reload()})),l.textContent="Title ",s.value=`${e.tasksArray[r].title}`,i.textContent="Description ",c.value=`${e.tasksArray[r].description}`,d.textContent="DueDate ",u.setAttribute("type","date"),u.value=`${e.tasksArray[r].dueDate}`,m.textContent="Priority",E.setAttribute("value","high"),g.setAttribute("value","medium"),v.setAttribute("value","low"),E.textContent="High",g.textContent="Medium",v.textContent="Low",f.textContent="Complete?",y.setAttribute("type","checkbox"),"true"==e.tasksArray[r].complete?e.tasksArray[r].complete=!0:"false"==e.tasksArray[r].complete&&(e.tasksArray[r].complete=!1),y.checked=e.tasksArray[r].complete,a.appendChild(o),a.appendChild(l),l.appendChild(s),a.appendChild(i),i.appendChild(c),a.appendChild(d),d.appendChild(u),p.appendChild(E),p.appendChild(g),p.appendChild(v),p.value=`${e.tasksArray[r].priority}`,m.appendChild(p),a.appendChild(m),a.appendChild(f),f.appendChild(y),t.appendChild(a),"high"==p.value?p.style.color="red":"medium"==p.value?p.style.color="orangered":p.style.color="green",1==e.tasksArray[r].complete?a.classList.add("complete"):a.classList.remove("complete"),B()})),S())}const h=n(365),k="project.id",b="current.project.id";let A=JSON.parse(localStorage.getItem(k))||[],L=localStorage.getItem(b);class x{constructor(e){this.title=e,this.id=Date.now().toString(),this.tasksArray=[]}}class C{constructor(e,t,n,r,a,o){this.title=e,this.description=t,this.dueDate=n,this.priority=r,this.complete=a,this.color=o}}function I(){let e=h();const t=A.find((e=>e.id===L)),n=new C(`${a.value}`,`${o.value}`,`${l.value}`,`${s.value}`,`${i.checked}`,`${e}`);t.tasksArray.push(n)}function S(){localStorage.setItem(k,JSON.stringify(A)),localStorage.setItem(b,L)}function B(){const e=A.find((e=>e.id===L));document.querySelectorAll(".task-title-in").forEach((t=>{t.addEventListener("change",(n=>{e.tasksArray[t.parentElement.parentElement.dataset.key].title=n.target.value,S()}))})),document.querySelectorAll(".task-desc-in").forEach((t=>{t.addEventListener("change",(n=>{e.tasksArray[t.parentElement.parentElement.dataset.key].description=n.target.value,S()}))})),document.querySelectorAll(".task-date-in").forEach((t=>{t.addEventListener("change",(n=>{e.tasksArray[t.parentElement.parentElement.dataset.key].dueDate=n.target.value,S()}))})),document.querySelectorAll(".task-prio-in").forEach((t=>{t.addEventListener("change",(n=>{e.tasksArray[t.parentElement.parentElement.dataset.key].priority=n.target.value,"high"==t.value?t.style.color="red":"medium"==t.value?t.style.color="orangered":t.style.color="green",S()}))})),document.querySelectorAll(".task-complete-in").forEach((t=>{t.addEventListener("change",(n=>{e.tasksArray[t.parentElement.parentElement.dataset.key].complete=n.target.checked,1==t.checked?t.parentElement.parentElement.classList.add("complete"):t.parentElement.parentElement.classList.remove("complete"),S()}))}))}window.addEventListener("keyup",(e=>{"open"==c.className.toString()&&"textarea"!==e.target.tagName.toLowerCase()&&"Enter"==e.key&&(I(),f(),y(),c.classList.remove("open"))})),v.addEventListener("click",(function(){const e=A.find((e=>e.id===L));null!=e&&(e.tasksArray=e.tasksArray.filter((e=>!e.complete)),S(),y())})),document.getElementById("add-task-plus-icon").addEventListener("click",(()=>{if(document.getElementById("modal").classList.toggle("open"),0==A.length){""!=p.value&&(p.value="");const e=new x("Default");A.push(e),L=e.id,f()}})),d.addEventListener("click",(()=>{c.classList.remove("open")})),u.addEventListener("click",(()=>{I(),f(),y(),c.classList.remove("open")})),e.addEventListener("click",(function(e){if("div"==e.target.tagName.toLowerCase())L=e.target.dataset.id,e.target.classList.toggle("current"),m.checked=!1;else{if("option"!=e.target.tagName.toLowerCase())return;L=e.target.parentElement.parentElement.dataset.id,e.target.parentElement.parentElement.classList.toggle("current"),m.checked=!1}f(),y()})),c.addEventListener("click",(e=>{e.target.classList.contains("open")&&c.classList.remove("open")})),g.addEventListener("click",(()=>{null!=p.value&&""!==p.value&&f()})),E.addEventListener("submit",(()=>{null!=p.value&&""!==p.value&&f()})),document.body.onload=(()=>{let e=document.getElementById("add-task-text");setInterval((()=>{e.classList.add("on"),setTimeout((()=>{e.classList.remove("on")}),1e3)}),5e3)})(),f(),y()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,